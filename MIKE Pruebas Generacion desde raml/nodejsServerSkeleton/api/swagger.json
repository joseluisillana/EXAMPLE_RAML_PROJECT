{
  "swagger": "2.0",
  "info": {
    "title": "MikeAPI",
    "description": "",
    "version": "1.0.0"
  },
  "produces": ["application/json"],
  "host": "localhost:8080",
  "basePath": "/mike/v1",
  "paths": {
  
  "/log/unstructured": {
    
    "get": {
      "summary": "Get all logs.",
      "description":"Get all logs.",
      "x-swagger-router-controller": "Log",
      "tags": ["Log"],
      "operationId": "getLogUnstructured",
      "parameters": [
        {
  "name" : "dateFrom",
  "in" : "query",
  "description" : "The starter date in timestamp format to filter the results in the query.",
  "required" : true,
  "type" : "string"
},
        {
  "name" : "filters",
  "in" : "query",
  "description" : "The filters to use in the query.",
  "required" : false,
  "type" : "string"
},
        {
  "name" : "fields",
  "in" : "query",
  "description" : "The fields to expose in the results.",
  "required" : false,
  "type" : "string"
},
        {
  "name" : "orderBy",
  "in" : "query",
  "description" : "The sorting options to return the results ordered by a field or dimension.",
  "required" : false,
  "type" : "string"
},
        {
  "name" : "dateTo",
  "in" : "query",
  "description" : "The top date in timestamp format to filter the results in the query.",
  "required" : false,
  "type" : "string"
}
        
      ],
      "responses": {
        "200": {
  "description" : "-- M.I.K.E API--\nmethod: Get\npath: /log/unstructured\ndescription: This method is to get a list of logs with no structure. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\n\nmessage: M.I.K.E - OK.\n",
  "schema" : {
    "$ref" : "#/definitions/ResponseGetUnstructuredLog"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 200,\n    \"status_message\": \"M.I.K.E - OK.\"\n  },\n  \"response_body\": [\"aaaa\",\"dddd\"]\n}\n"
  }
}
        ,
        "404": {
  "description" : "-- M.I.K.E API-- \nmethod: Get\npath: /log/structured\ndescription: This method is to get a list of logs which are structured following the canonical model. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\nmessage: M.I.K.E - The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.\n",
  "schema" : {
    "$ref" : "#/definitions/Response404"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 404,\n    \"status_message\": \"M.I.K.E - The server has not found anything matching the URI given.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "500": {
  "description" : "M.I.K.E - The server encountered an unexpected condition which prevented it from fulfilling the request.",
  "schema" : {
    "$ref" : "#/definitions/Response500"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 500,\n    \"status_message\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        
        
      }
    } ,
    
    "post": {
      "summary": "Put a new trace on the system",
      "description":"Put a new trace on the system",
      "x-swagger-router-controller": "Log",
      "tags": ["Log"],
      "operationId": "postLogUnstructured",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : false,
  "schema" : {
    "$ref" : "#/definitions/InputBodyUnstructuredLog"
  }
}
        
      ],
      "responses": {
        "201": {
  "description" : "-- M.I.K.E API-- \nmethod: Post\npath: /log/structured\ndescription: This method is to send a new log to the box which is structured following the canonical model. \nmessage: M.I.K.E - Created OK.\n",
  "schema" : {
    "$ref" : "#/definitions/Response201"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 201,\n    \"status_message\": \"M.I.K.E - Created OK.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "404": {
  "description" : "-- M.I.K.E API-- \nmethod: Get\npath: /log/structured\ndescription: This method is to get a list of logs which are structured following the canonical model. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\nmessage: M.I.K.E - The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.\n",
  "schema" : {
    "$ref" : "#/definitions/Response404"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 404,\n    \"status_message\": \"M.I.K.E - The server has not found anything matching the URI given.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "500": {
  "description" : "M.I.K.E - The server encountered an unexpected condition which prevented it from fulfilling the request.",
  "schema" : {
    "$ref" : "#/definitions/Response500"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 500,\n    \"status_message\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        
        
      }
    } 
    
  } ,
  
  "/log/structured": {
    
    "get": {
      "summary": "Get a list of logs which are structured following the canonical model.",
      "description":"Get a list of logs which are structured following the canonical model.",
      "x-swagger-router-controller": "Log",
      "tags": ["Log"],
      "operationId": "getLogStructured",
      "responses": {
        "200": {
  "description" : "-- M.I.K.E API--\nmethod: Get\npath: /log/structured\ndescription: This method is to get a list of logs which are structured following the canonical model. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\n\nmessage: M.I.K.E - OK.\n",
  "schema" : {
    "$ref" : "#/definitions/ResponseGetStructuredLog"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 200,\n    \"status_message\": \"M.I.K.E - OK.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "404": {
  "description" : "-- M.I.K.E API-- \nmethod: Get\npath: /log/structured\ndescription: This method is to get a list of logs which are structured following the canonical model. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\nmessage: M.I.K.E - The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.\n",
  "schema" : {
    "$ref" : "#/definitions/Response404"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 404,\n    \"status_message\": \"M.I.K.E - The server has not found anything matching the URI given.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "500": {
  "description" : "M.I.K.E - The server encountered an unexpected condition which prevented it from fulfilling the request.",
  "schema" : {
    "$ref" : "#/definitions/Response500"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 500,\n    \"status_message\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        
        
      }
    } ,
    
    "post": {
      "summary": "Put a new trace on the system",
      "description":"Put a new trace on the system",
      "x-swagger-router-controller": "Log",
      "tags": ["Log"],
      "operationId": "postLogStructured",
      "parameters": [
        {
  "in" : "body",
  "name" : "body",
  "required" : false,
  "schema" : {
    "$ref" : "#/definitions/InputBodyStructuredLog"
  }
}
        
      ],
      "responses": {
        "201": {
  "description" : "-- M.I.K.E API-- \nmethod: Post\npath: /log/structured\ndescription: This method is to send a new log to the box which is structured following the canonical model. \nmessage: M.I.K.E - Created OK.\n",
  "schema" : {
    "$ref" : "#/definitions/Response201"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 201,\n    \"status_message\": \"M.I.K.E - Created OK.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "404": {
  "description" : "-- M.I.K.E API-- \nmethod: Get\npath: /log/structured\ndescription: This method is to get a list of logs which are structured following the canonical model. It should be queried filtering by the one or more fields follow:\n\n- filters.- The filters to use in the query. per example; \"filters=field1:value1,field2:value2,etc...\"\n- fields.- The fields to expose in the results. per example; \"fields=field1,field2,field3,etc ...\"\n- orderBy.- The sorting options to return the results ordered by a field or dimension. per example; \"orderBy=field1:asc|desc,field2:asc|desc,field3:asc|desc,etc ...\"\n- dateFrom.- The starter date in timestamp format to filter the results in the query. per example; \"dateFrom=1444389041012\"\n- dateTo.- The top date in timestamp format to filter the results in the query. per example; \"dateTo=1444389041012\"\nmessage: M.I.K.E - The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.\n",
  "schema" : {
    "$ref" : "#/definitions/Response404"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 404,\n    \"status_message\": \"M.I.K.E - The server has not found anything matching the URI given.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        ,
        "500": {
  "description" : "M.I.K.E - The server encountered an unexpected condition which prevented it from fulfilling the request.",
  "schema" : {
    "$ref" : "#/definitions/Response500"
  },
  "examples" : {
    "application/json" : "{\n  \"response_status\": {\n    \"status_code\": 500,\n    \"status_message\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\"\n  },\n  \"response_body\": [{}]\n}\n"
  }
}
        
        
      }
    } 
    
  } 
  
  }, "definitions": {
  "InputBodyStructuredLog": {
  "type" : "object",
  "required" : [ "inbound_call", "outbound_calls", "srv_href", "srv_id", "srv_type", "uuaa" ],
  "properties" : {
    "inbound_call" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call"
    },
    "outbound_calls" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/InputBodyStructuredLog_Outbound_calls"
      }
    },
    "schema_version" : {
      "type" : "string"
    },
    "srv_href" : {
      "type" : "string"
    },
    "srv_id" : {
      "type" : "string"
    },
    "srv_type" : {
      "type" : "string"
    },
    "uuaa" : {
      "type" : "string"
    }
  }
},"InputBodyStructuredLog_Inbound_call": {
  "type" : "object",
  "properties" : {
    "aap" : {
      "type" : "string"
    },
    "additional_data" : {
      "type" : "string"
    },
    "call_id" : {
      "type" : "string"
    },
    "caller_ip" : {
      "type" : "string"
    },
    "cms" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Cms"
    },
    "custormer_id" : {
      "type" : "string"
    },
    "health" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Health"
    },
    "hostname" : {
      "type" : "string"
    },
    "instance_name" : {
      "type" : "string"
    },
    "journal" : {
      "type" : "string"
    },
    "location" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Location"
    },
    "msg_in" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Msg_in"
    },
    "msg_out" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Msg_out"
    },
    "process_id" : {
      "type" : "string"
    },
    "process_type" : {
      "type" : "string"
    },
    "session_id" : {
      "type" : "string"
    },
    "user_action_id" : {
      "type" : "string"
    },
    "user_agent" : {
      "type" : "string"
    },
    "user_id" : {
      "type" : "string"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Cms": {
  "type" : "object",
  "properties" : {
    "channel" : {
      "type" : "integer",
      "format" : "int64"
    },
    "medium" : {
      "type" : "integer",
      "format" : "int64"
    },
    "service" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Health": {
  "type" : "object",
  "properties" : {
    "http_status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "response_code" : {
      "type" : "string"
    },
    "response_status" : {
      "type" : "string"
    },
    "response_time" : {
      "type" : "integer",
      "format" : "int64"
    },
    "timestamp" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Location": {
  "type" : "object",
  "properties" : {
    "branch" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Location_Branch"
    },
    "geolocation" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Location_Geolocation"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Location_Branch": {
  "type" : "object",
  "properties" : {
    "bank" : {
      "type" : "string"
    },
    "branch_address" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Location_Branch_Branch_address"
    },
    "branch_code" : {
      "type" : "string"
    },
    "branch_id" : {
      "type" : "string"
    },
    "head_branch" : {
      "type" : "string"
    },
    "operative_bank" : {
      "type" : "string"
    },
    "operative_branch" : {
      "type" : "string"
    },
    "region" : {
      "type" : "string"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Location_Branch_Branch_address": {
  "type" : "object",
  "properties" : {
    "country" : {
      "type" : "string"
    },
    "post_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "province" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Location_Geolocation": {
  "type" : "object",
  "properties" : {
    "lat" : {
      "type" : "string"
    },
    "lon" : {
      "type" : "string"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Msg_in": {
  "type" : "object",
  "properties" : {
    "body" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Msg_in_Body"
    },
    "header" : {
      "$ref" : "#/definitions/InputBodyStructuredLog_Inbound_call_Msg_in_Header"
    }
  }
},"InputBodyStructuredLog_Inbound_call_Msg_in_Body": {
  "type" : "object"
},"InputBodyStructuredLog_Inbound_call_Msg_in_Header": {
  "type" : "object"
},"InputBodyStructuredLog_Inbound_call_Msg_out": {
  "type" : "object",
  "properties" : {
    "body" : {
      "type" : "string"
    },
    "header" : {
      "type" : "string"
    }
  }
},"InputBodyStructuredLog_Outbound_calls": {
  "type" : "object",
  "properties" : {
    "srv_href" : {
      "type" : "string"
    },
    "srv_type" : {
      "type" : "string"
    },
    "uuaa" : {
      "type" : "string"
    }
  }
},"InputBodyUnstructuredLog": {
  "type" : "object",
  "required" : [ "message" ],
  "properties" : {
    "message" : {
      "type" : "string"
    }
  }
},"Response201": {
  "type" : "object",
  "required" : [ "response_status" ],
  "properties" : {
    "response_status" : {
      "$ref" : "#/definitions/Response201_Response_status"
    }
  }
},"Response201_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"Response404": {
  "type" : "object",
  "required" : [ "response_status" ],
  "properties" : {
    "response_status" : {
      "$ref" : "#/definitions/Response404_Response_status"
    }
  }
},"Response404_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"Response500": {
  "type" : "object",
  "required" : [ "response_status" ],
  "properties" : {
    "response_status" : {
      "$ref" : "#/definitions/Response500_Response_status"
    }
  }
},"Response500_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog": {
  "type" : "object",
  "required" : [ "response_body", "response_status" ],
  "properties" : {
    "response_body" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body"
      }
    },
    "response_status" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_status"
    }
  }
},"ResponseGetStructuredLog_Response_body": {
  "type" : "object",
  "properties" : {
    "inbound_call" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call"
    },
    "outbound_calls" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Outbound_calls"
      }
    },
    "srv_href" : {
      "type" : "string"
    },
    "srv_id" : {
      "type" : "string"
    },
    "srv_type" : {
      "type" : "string"
    },
    "uuaa" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call": {
  "type" : "object",
  "properties" : {
    "aap" : {
      "type" : "string"
    },
    "additional_data" : {
      "type" : "string"
    },
    "call_id" : {
      "type" : "string"
    },
    "caller_ip" : {
      "type" : "string"
    },
    "cms" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Cms"
    },
    "custormer_id" : {
      "type" : "string"
    },
    "health" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Health"
    },
    "hostname" : {
      "type" : "string"
    },
    "instance_name" : {
      "type" : "string"
    },
    "journal" : {
      "type" : "string"
    },
    "location" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Location"
    },
    "msg_in" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in"
    },
    "msg_out" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Msg_out"
    },
    "process_id" : {
      "type" : "string"
    },
    "process_type" : {
      "type" : "string"
    },
    "session_id" : {
      "type" : "string"
    },
    "user_action_id" : {
      "type" : "string"
    },
    "user_agent" : {
      "type" : "string"
    },
    "user_id" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Cms": {
  "type" : "object",
  "properties" : {
    "channel" : {
      "type" : "integer",
      "format" : "int64"
    },
    "medium" : {
      "type" : "integer",
      "format" : "int64"
    },
    "service" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Health": {
  "type" : "object",
  "properties" : {
    "http_status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "response_code" : {
      "type" : "string"
    },
    "response_status" : {
      "type" : "string"
    },
    "response_time" : {
      "type" : "integer",
      "format" : "int64"
    },
    "timestamp" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Location": {
  "type" : "object",
  "properties" : {
    "branch" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Location_Branch"
    },
    "geolocation" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Location_Geolocation"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Location_Branch": {
  "type" : "object",
  "properties" : {
    "bank" : {
      "type" : "string"
    },
    "branch_address" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Location_Branch_Branch_address"
    },
    "branch_code" : {
      "type" : "string"
    },
    "branch_id" : {
      "type" : "string"
    },
    "head_branch" : {
      "type" : "string"
    },
    "operative_bank" : {
      "type" : "string"
    },
    "operative_branch" : {
      "type" : "string"
    },
    "region" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Location_Branch_Branch_address": {
  "type" : "object",
  "properties" : {
    "country" : {
      "type" : "string"
    },
    "post_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "province" : {
      "type" : "integer",
      "format" : "int64"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Location_Geolocation": {
  "type" : "object",
  "properties" : {
    "lat" : {
      "type" : "string"
    },
    "lon" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in": {
  "type" : "object",
  "properties" : {
    "body" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in_Body"
    },
    "header" : {
      "$ref" : "#/definitions/ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in_Header"
    }
  }
},"ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in_Body": {
  "type" : "object"
},"ResponseGetStructuredLog_Response_body_Inbound_call_Msg_in_Header": {
  "type" : "object"
},"ResponseGetStructuredLog_Response_body_Inbound_call_Msg_out": {
  "type" : "object",
  "properties" : {
    "body" : {
      "type" : "string"
    },
    "header" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_body_Outbound_calls": {
  "type" : "object",
  "properties" : {
    "srv_href" : {
      "type" : "string"
    },
    "srv_type" : {
      "type" : "string"
    },
    "uuaa" : {
      "type" : "string"
    }
  }
},"ResponseGetStructuredLog_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"ResponseGetUnstructuredLog": {
  "type" : "object",
  "required" : [ "response_body", "response_status" ],
  "properties" : {
    "response_body" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "response_status" : {
      "$ref" : "#/definitions/ResponseGetUnstructuredLog_Response_status"
    }
  }
},"ResponseGetUnstructuredLog_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"ResponseStructuredDefault": {
  "type" : "object",
  "required" : [ "response_status" ],
  "properties" : {
    "response_body" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/ResponseStructuredDefault_Response_body"
      }
    },
    "response_status" : {
      "$ref" : "#/definitions/ResponseStructuredDefault_Response_status"
    }
  }
},"ResponseStructuredDefault_Response_body": {
  "type" : "object"
},"ResponseStructuredDefault_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
},"ResponseUnstructuredDefault": {
  "type" : "object",
  "required" : [ "response_status" ],
  "properties" : {
    "response_body" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "response_status" : {
      "$ref" : "#/definitions/ResponseUnstructuredDefault_Response_status"
    }
  }
},"ResponseUnstructuredDefault_Response_status": {
  "type" : "object",
  "required" : [ "status_code", "status_message" ],
  "properties" : {
    "status_code" : {
      "type" : "integer",
      "format" : "int64"
    },
    "status_message" : {
      "type" : "string"
    }
  }
}
  }
}
